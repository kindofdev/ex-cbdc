module Interface.Finance.Account.DebitRequest where

import Daml.Finance.Interface.Holding.Base qualified as BaseHolding
import Daml.Finance.Interface.Types.Common.Types (AccountKey(..))

-- | Type synonym for `DebitRequest`.
type I = DebitRequest

-- | Type synonym for `View`.
type V = View

-- | View for `DebitRequest`.
data View = View
  with
    account : AccountKey
    holdingCid : ContractId BaseHolding.I
  deriving (Eq, Show)

interface DebitRequest where
  viewtype V

  accept : Update ()
  reject : Reject -> Update (ContractId DebitRejection)

  nonconsuming choice GetView : View
    -- ^ Retrieves the interface view.
    with
      viewer : Party
        -- ^ The party fetching the view.
    controller viewer
    do
      pure $ view this

  nonconsuming choice Accept : ()
    controller (view this).account.custodian
    do
      accept this

  nonconsuming choice Reject : ContractId DebitRejection
    with
      reason : Text
    controller (view this).account.custodian
    do
      reject this arg

template DebitRejection
  with
    holdingV : BaseHolding.View
    reason : Text
  where
    let account = holdingV.account
    signatory account.custodian, account.owner
