module Interface.Finance.Account.Factory where

import DA.Set (Set)
import Daml.Finance.Interface.Account.Account qualified as Account
import Daml.Finance.Interface.Holding.Factory qualified as Holding
import Daml.Finance.Interface.Types.Common.Types (AccountKey(..), InstrumentKey, PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure

-- | Type synonym for `Factory`.
type F = Factory

-- | Type synonym for `View`.
type V = View

-- View of `Factory`.
data View = View
  with
    provider : Party
      -- ^ The provider of the `Factory`.
  deriving (Eq, Show)

-- | Interface that allows implementing templates to create accounts.
interface Factory requires Disclosure.I where
  viewtype V

  create' : Create -> Update (ContractId Account.I)
    -- ^ Implementation of `Create` choice.
  remove : Remove -> Update ()
    -- ^ Implementation of `Remove` choice.

  nonconsuming choice Create : ContractId Account.I
    -- ^ Create a new account.
    with
      account : AccountKey
        -- ^ The account's key.
      holdingFactoryCid : ContractId Holding.F
        -- ^ Associated holding factory for the account.
      controllers : Account.Controllers
        -- ^ Controllers of the account.
      description : Text
        -- ^ Human readable description of the account.
      supportCreditRequest : Bool
        -- ^ Indicates whether owner can request credit.
      supportDebitRequest : Bool
        -- ^ Indicates whether owner can request debit.
      instrumentsAllowedToBeDebited : Set InstrumentKey
      -- ^ The instruments that can be debited.
      observers : PartiesMap
        -- ^ The account's observers.
    controller account.custodian, account.owner
    do
      create' this arg

  nonconsuming choice Remove : ()
    -- ^ Archive an account.
    with
      account : AccountKey
        -- ^ The account's key.
    controller account.custodian, account.owner
      do
        remove this arg
