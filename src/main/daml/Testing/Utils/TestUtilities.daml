{-# LANGUAGE AllowAmbiguousTypes #-}

module Testing.Utils.TestUtilities where

import DA.Optional
import DA.Map (Map)
import DA.Map qualified as Map
import Daml.Script

import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument
import Daml.Finance.Interface.Types.Common.Types (InstrumentKey(..))

import Interface.Certificate.Types
import Interface.Finance.Instrument.Cbdc.Instrument qualified as Cbdc

createSectorToInstrumentMap : Party -> [InstrumentKey] -> Script (Map Sector InstrumentKey)
createSectorToInstrumentMap viewer ks = Map.fromList <$>
  forA ks \k -> do
    cid <- submit viewer $ exerciseByKeyCmd @BaseInstrument.R k BaseInstrument.GetCid with ..
    cbdcV <- fromSome <$> queryInterfaceContractId @Cbdc.I viewer (coerceContractId cid)
    pure (cbdcV.earmark, k)

-- | Utility for exercising interface by key (submitMulti composed with exerciseInterfaceByKey
-- helper)
submitExerciseInterfaceByKeyCmdHelper : forall t1 t2 t c1 k c2 b.
  (HasInterfaceTypeRep t2, HasInterfaceTypeRep t, Template t1, Choice t1 c1 (ContractId t),
  HasKey t1 k, HasLookupByKey t1 k, HasFetchByKey t1 k, HasMaintainer t1 k,
  HasToAnyContractKey t1 k, HasFromAnyContractKey t1 k, HasTemplateTypeRep t2, HasToAnyTemplate t2,
  HasFromAnyTemplate t2, HasToAnyChoice t2 c2 b, HasFromAnyChoice t2 c2 b, HasExercise t2 c2 b)
  => [Party] -> [Party] -> k -> c1 -> c2 -> Script b
submitExerciseInterfaceByKeyCmdHelper actAs readAs k arg1 arg2 = do
  cid <- submitMulti actAs readAs do exerciseByKeyCmd @t1 k arg1
  submitMulti actAs readAs do exerciseCmd (coerceInterfaceContractId @t2 cid) arg2

-- | Utility for exercising interface by key (submitMulti composed with exerciseInterfaceByKey
-- helper)
submitMustFailExerciseInterfaceByKeyCmdHelper : forall t1 t2 t c1 k c2 b.
  (HasInterfaceTypeRep t2, HasInterfaceTypeRep t, Template t1, Choice t1 c1 (ContractId t),
  HasKey t1 k, HasLookupByKey t1 k, HasFetchByKey t1 k, HasMaintainer t1 k,
  HasToAnyContractKey t1 k, HasFromAnyContractKey t1 k, HasTemplateTypeRep t2, HasToAnyTemplate t2,
  HasFromAnyTemplate t2, HasToAnyChoice t2 c2 (), HasFromAnyChoice t2 c2 (), HasExercise t2 c2 ())
  => [Party] -> [Party] -> k -> c1 -> c2 -> Script ()
submitMustFailExerciseInterfaceByKeyCmdHelper actAs readAs k arg1 arg2 = do
  cid <- submitMulti actAs readAs do exerciseByKeyCmd @t1 k arg1
  submitMultiMustFail actAs readAs do exerciseCmd (coerceInterfaceContractId @t2 cid) arg2

assertICidNonExistence : (Template i, HasInterfaceView i v) => Party -> ContractId i -> Script ()
assertICidNonExistence viewer cid = assert . isNone =<< queryInterfaceContractId viewer cid

assertICidExistence : (Template i, HasInterfaceView i v) => Party -> ContractId i -> Script ()
assertICidExistence viewer cid = assert . isSome =<< queryInterfaceContractId viewer cid
