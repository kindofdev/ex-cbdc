module Testing.Utils.Factory where

import Daml.Script
import DA.Map qualified as Map
import DA.Set qualified as Set

import Daml.Finance.Interface.Holding.Factory qualified as Holding
import Daml.Finance.Interface.Types.Common.Types (PartiesMap)

import Interface.Billing.Invoice.Factory qualified as Invoice (F)
import Interface.Certificate.Factory qualified as CertificateFactory
import Interface.Certificate.Types (Sector(..))
import Interface.Finance.Account.Factory qualified as Account (F)
import Interface.Finance.Instrument.Cbdc.Factory qualified as Cbdc (F)

import Billing.Invoice.Factory qualified as Invoice (Factory(..))
import Certificate.Factory qualified as Certificate
import Finance.Account.Account as Account
import Finance.Holding.Fungible qualified as Fungible
import Finance.Instrument.Cbdc.Factory qualified as Cbdc (Factory(..))

createCbdcFactory : Party -> PartiesMap -> Script (ContractId Cbdc.F)
createCbdcFactory provider observers = submit provider $
  toInterfaceContractId @Cbdc.F <$> createCmd Cbdc.Factory with ..

createAccountFactory : Party -> PartiesMap -> Script (ContractId Account.F)
createAccountFactory provider observers = submit provider $
  toInterfaceContractId @Account.F <$> createCmd Account.Factory with ..

createHoldingFactory : Party -> PartiesMap -> Script (ContractId Holding.F)
createHoldingFactory provider observers = submit provider $
  toInterfaceContractId @Holding.F <$> createCmd Fungible.Factory with ..

createInvoiceFactory : Party -> PartiesMap -> Script (ContractId Invoice.F)
createInvoiceFactory provider observers = submit provider $
  toInterfaceContractId @Invoice.F <$> createCmd Invoice.Factory with ..

createCertificateFactory
  : Party -> Party -> Sector -> PartiesMap
 -> Script (ContractId CertificateFactory.F)
createCertificateFactory provider distributor sector observers = submit provider $
  toInterfaceContractId <$> createCmd Certificate.Factory with
    observers = Map.fromList [(show distributor, Set.singleton distributor)]
    ..
