module Finance.Instrument.Cbdc.Instrument where

import DA.Set qualified as Set

import Daml.Finance.Interface.Instrument.Base.Instrument qualified as BaseInstrument
import Daml.Finance.Interface.Types.Common.Types (InstrumentKey(..), PartiesMap)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)

import Interface.Certificate.Types (Sector(..))
import Interface.Finance.Instrument.Cbdc.Instrument qualified as Cbdc

-- | Type synonym for `Instrument`.
type T = Instrument

-- | Implementation of an Instrument which does not define any lifecycling logic.
template Instrument
  with
    depository : Party
      -- ^ The instrument's depository.
    issuer : Party
      -- ^ The instrument's issuer.
    version : Text
      -- ^ A textual instrument version.
    description : Text
      -- ^ A description of the instrument.
    validAsOf : Time
      -- ^ Timestamp as of which the instrument is valid. This usually coincides with the timestamp
      --   of the event that creates the instrument. It usually does not coincide with ledger time.
    earmark : Sector
      -- ^ An earmark.
    observers : PartiesMap
      -- ^ Observers.
  where
    signatory depository, issuer
    observer Disclosure.flattenObservers observers

    let id = Cbdc.getId earmark
        instrument = InstrumentKey with depository; issuer; id; version

    interface instance BaseInstrument.I for Instrument where
      view = BaseInstrument.View with depository; issuer; id; validAsOf; description; version
      getKey = instrument
      asDisclosure = toInterface @Disclosure.I this

    interface instance Cbdc.I for Instrument where
      view = Cbdc.View with ..

    interface instance Disclosure.I for Instrument where
      view = Disclosure.View with disclosureControllers = Set.singleton issuer; observers
      setObservers = setObserversImpl this $
        Some (BaseInstrument.disclosureUpdateReference instrument)
      addObservers = addObserversImpl @Instrument this $
        Some (BaseInstrument.disclosureUpdateReference instrument)
      removeObservers = removeObserversImpl this $
        Some (BaseInstrument.disclosureUpdateReference instrument)
