module Finance.Holding.Fungible where

import DA.Action (foldlA)
import DA.Foldable qualified as F
import DA.Set (fromList, singleton)
import DA.Set qualified as S
import DA.Traversable qualified as T

import Daml.Finance.Holding.Util hiding (transferImpl)
import Daml.Finance.Interface.Account.Account qualified as Account
import Daml.Finance.Interface.Account.Util (fetchAccount)
import Daml.Finance.Interface.Holding.Base (getLockers)
import Daml.Finance.Interface.Holding.Base qualified as Base
import Daml.Finance.Interface.Holding.Factory qualified as HoldingFactory
import Daml.Finance.Interface.Holding.Fungible qualified as Fungible
import Daml.Finance.Interface.Holding.Transferable qualified as Transferable
import Daml.Finance.Interface.Types.Common.Types (AccountKey(..), InstrumentKey(..), PartiesMap)
import Daml.Finance.Interface.Util.Common (fetchInterfaceByKey, verify, qty)
import Daml.Finance.Interface.Util.Disclosure qualified as Disclosure
import Daml.Finance.Util.Disclosure (addObserversImpl, removeObserversImpl, setObserversImpl)

import Interface.Certificate.Types (Sector(..))
import Interface.Finance.Instrument.Cbdc.Instrument qualified as Cbdc

import Finance.Holding.Util (checkValidEarmarkedTransfer)

-- | Type synonym for `Factory`.
type F = Factory

-- | Type synonym for `Fungible`.
type T = Fungible

instance Fungible.HasImplementation T
-- | Implementation of a fungible holding.
-- The `Fungible` template implements the interface `Fungible.I` (which requires `Transferable.I`,
-- `Base.I` and `Disclosure.I` to be implemented).
template Fungible
  with
    instrument : InstrumentKey
      -- ^ The instrument of which units are held.
    account : AccountKey
      -- ^ The account at which the holding is held. Defines the holding's owner and custodian.
    amount : Decimal
      -- ^ Number of units.
    lock : Optional Base.Lock
      -- ^ An optional lock of a holding.
    observers : PartiesMap
      -- ^ Observers.
  where
    signatory account.custodian, account.owner, getLockers this
    observer Disclosure.flattenObservers observers

    ensure amount > 0.0

    let spawn = \a -> toInterfaceContractId @Fungible.I <$> create this with amount = a

    interface instance Disclosure.I for Fungible where
      view = Disclosure.View with
        disclosureControllers = fromList [account.owner, account.custodian]; observers
      setObservers = setObserversImpl @Fungible @Disclosure.I this None
      addObservers = addObserversImpl @Fungible @Disclosure.I this None
      removeObservers = removeObserversImpl @Fungible @Disclosure.I this None

    interface instance Base.I for Fungible where
      asDisclosure = toInterface @Disclosure.I this
      view = Base.View with instrument; account; amount; lock
      acquire = acquireImpl @Fungible this
      release = releaseImpl @Fungible this

    interface instance Transferable.I for Fungible where
      asBase = toInterface @Base.I this
      view = Transferable.View {}
      transfer = transferImpl $ toInterface @Transferable.I this

    interface instance Fungible.I for Fungible where
      asTransferable = toInterface @Transferable.I this
      view = Fungible.View with modifiers = singleton account.owner
      split Fungible.Split{amounts} = do
        splitCids <- forA amounts spawn
        restAmount <- getRestAmount amounts amount
        rest <- T.forA restAmount spawn
        pure Fungible.SplitResult with splitCids; rest
      merge Fungible.Merge{fungibleCids} = do
        assertMsg "list of fungibles must be non-empty" $ not $ null fungibleCids
        let
          aggregate a cid = do
            Some (fungibleCid, fungible) <- fetchFromInterface @Fungible cid
            assertMsg "instrument must match" $ instrument == fungible.instrument
            assertMsg "account must match" $ account == fungible.account
            assertMsg "signatories must match" $
              fromList (signatory this) == fromList (signatory fungible)
            archive fungibleCid
            pure $ a + fungible.amount
        tot <- foldlA aggregate amount fungibleCids
        spawn tot

transferImpl
 : Transferable.I -> ContractId Transferable.I -> Transferable.Transfer
 -> Update (ContractId Transferable.I)
transferImpl this self Transferable.Transfer{actors; newOwnerAccount} = do
  let
    baseCid = toInterfaceContractId @Base.I self
    base = toInterface @Base.I this
  account <- fetchAccount base
  let
    vBase = view base
    vAccount = view account
    lockers = Base.getLockers base

  vNewAccount <- view <$> fetchInterfaceByKey @Account.R @Account.I newOwnerAccount
  -- Verify
  assertMsg "Actors must contain all transfer outgoing of the sender account"
    $ vAccount.controllers.outgoing `S.isSubsetOf` actors
  assertMsg "Actors must contain all transfer incoming of the receiving account"
    $ vNewAccount.controllers.incoming `S.isSubsetOf` actors
  assertMsg "Actors must contain all lockers" $ lockers `S.isSubsetOf` actors
  assertMsg "Custodians must be the same" $ vBase.account.custodian == vAccount.custodian
  -- Release all locks
  let
    releaseAll cid lock =
      foldlA (\acc context -> exercise acc Base.Release with context) cid (S.toList lock.context)
  baseCid <- toInterfaceContractId @Base.I <$>
    optional (pure baseCid) (releaseAll baseCid) vBase.lock
  earmark <- Cbdc.getEarmark vBase.instrument vBase.account.custodian
  checkValidEarmarkedTransfer base earmark vBase.account newOwnerAccount

  -- Debit
  -- Notice that Account.Debit is not used because it checks that earmarked instruments cannot be debited.
  -- earmarked can be only debit in the context of a valid Transfer.
  archive self

  -- Once a holding gets transfered the instrument is no longer earmarked
  let instrument' = vBase.instrument with
        id = Cbdc.getId NoSector

  -- Credit
  newBaseCid <- Account.exerciseInterfaceByKey @Account.I newOwnerAccount newOwnerAccount.custodian
    Account.Credit with quantity = qty vBase.amount instrument'
  -- Consistency check
  newBase <- fetch newBaseCid
  assertMsg "credited and debited holding types must match" $
    interfaceTypeRep newBase == interfaceTypeRep base
  -- Reapply locks
  let
    reapplyLocks cid lock = foldlA (\acc context -> exercise acc Base.Acquire with
      newLockers = lock.lockers; context; lockType = lock.lockType) cid (S.toList lock.context)
  coerceInterfaceContractId <$> optional (pure newBaseCid) (reapplyLocks newBaseCid) vBase.lock


instance HoldingFactory.HasImplementation Factory
-- | Implementation of the corresponding Holding Factory.
template Factory
  with
    provider : Party
      -- ^ The factory's provider.
    observers : PartiesMap
      -- ^ The factory's observers.
  where
    signatory provider
    observer Disclosure.flattenObservers observers

    interface instance HoldingFactory.F for Factory
      where
        asDisclosure = toInterface @Disclosure.I this
        view = HoldingFactory.View with provider
        create' HoldingFactory.Create{instrument; account; amount; observers} = do
          assertMsg "amount must be positive" $ amount > 0.0
          toInterfaceContractId <$>
            create Fungible with instrument; account; amount; observers; lock = None
        remove HoldingFactory.Remove{holdingCid} =
          archive $ fromInterfaceContractId @Fungible holdingCid

    interface instance Disclosure.I for Factory where
      view = Disclosure.View with disclosureControllers = singleton provider; observers
      setObservers = setObserversImpl @Factory @Disclosure.I this None
      addObservers = addObserversImpl @Factory @Disclosure.I this None
      removeObservers = removeObserversImpl @Factory @Disclosure.I this None

-- | HIDE Gets the rest amount of a split (if any) and verifies that split amounts are strictly
-- positive and don't exceed the current amount.
getRestAmount : CanAssert m => [Decimal] -> Decimal -> m (Optional Decimal)
getRestAmount amounts currentAmount = do
  let splitAmountSum = sum amounts
  verify (splitAmountSum <= currentAmount && F.all (> 0.0) amounts && amounts /= []) $ "Fungible::"
    <> "verifySplit - Amounts must be non-empty, strictly positive, and not exceed current amount. "
    <> "amounts=" <> show amounts
    <> ", splitAmountSum=" <> show splitAmountSum
    <> ", currentAmount=" <> show currentAmount
  let rest = currentAmount - splitAmountSum
  pure $ if rest == 0.0 then None else Some rest
